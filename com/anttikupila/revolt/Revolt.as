package com.anttikupila.revolt {	import flash.media.Sound;	import flash.display.Sprite;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.events.MouseEvent;	import flash.utils.Timer;	import flash.utils.getTimer;	import flash.filters.DropShadowFilter;		import com.anttikupila.soundSpectrum.SoundProcessor;	import com.anttikupila.revolt.presets.*;	import com.anttikupila.revolt.transport.Transport;		import com.anttikupila.revolt.Log;		public class Revolt extends Sprite {		private var visualize:Boolean;		private var sp:SoundProcessor;		private var gfx:BitmapData;		private var presetList:Array;		private var presetInt:Timer;		private var preset:Preset;		private var lastChange:Number;		private var transport:Transport;				function Revolt(params:Object, w:uint, h:uint) {			var s:Sound = new Sound();			if ('true' != params.noVisualizer) {				this.sp = new SoundProcessor();								this.gfx = new BitmapData(w, h, false, 0x000000);				var pic:Bitmap = new Bitmap(gfx);				this.addChild(pic);				this.presetList = new Array(new LineFourier(), new LineNoFourier(), new Explosion(), new LineSmooth(), new LineWorm(), new Tunnel());								var initialDelay:Timer = new Timer(7100, 1);				initialDelay.addEventListener(TimerEvent.TIMER, setupTimer);				initialDelay.start();								// initialize				nextPreset(null);								this.addEventListener(Event.ENTER_FRAME, compute);				this.buttonMode = true;				this.addEventListener(MouseEvent.CLICK, nextPreset);			} else {			  this.graphics.lineStyle(0x000000, 1);			  this.graphics.beginFill(0x000000, 1);			  this.graphics.drawRect(0, 0, w, h);			  this.graphics.endFill();			}						this.transport = new Transport(params.mp3, s, w, h, 'true' == params.autoPlay);			this.addChild(transport);		}				private function compute(ev:Event):void {			if (!this.transport.isPlaying()) 			{ 			    return; 			}						var soundArray:Array; 			try			{			    soundArray = sp.getSoundSpectrum(preset.fourier);		    }		    catch(error:Error)		    {		        soundArray = [];		        for(var i:int = 0; i < 512; i++)		        {		            soundArray.push(Math.random());		        }	        }	        finally	        {			    preset.applyGfx(gfx, soundArray);		    }		}				private function setupTimer(ev:Event):void {			presetInt = new Timer(12950, 0);			presetInt.addEventListener(TimerEvent.TIMER, nextTimedPreset);			presetInt.start();			nextPreset(null);		}				private function nextPreset(ev:Event):void {			var index:uint = Math.floor(Math.random()*presetList.length);			var newPreset:Preset = presetList[index];			if (newPreset != preset) {				preset = newPreset;				preset.init();				trace("next effect is '" + preset.toString().toLowerCase() + "'");			} else {				nextPreset(null);			}			lastChange = getTimer();		}				private function nextTimedPreset(ev:Event):void {			if (getTimer() - lastChange > 5000) {				nextPreset(ev);			}		}	}}